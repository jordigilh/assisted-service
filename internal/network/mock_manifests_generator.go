// Code generated by MockGen. DO NOT EDIT.
// Source: manifests_generator.go

// Package network is a generated GoMock package.
package network

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	common "github.com/openshift/assisted-service/internal/common"
	reflect "reflect"
)

// MockManifestGeneratorAPI is a mock of ManifestGeneratorAPI interface
type MockManifestGeneratorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockManifestGeneratorAPIMockRecorder
}

// MockManifestGeneratorAPIMockRecorder is the mock recorder for MockManifestGeneratorAPI
type MockManifestGeneratorAPIMockRecorder struct {
	mock *MockManifestGeneratorAPI
}

// NewMockManifestGeneratorAPI creates a new mock instance
func NewMockManifestGeneratorAPI(ctrl *gomock.Controller) *MockManifestGeneratorAPI {
	mock := &MockManifestGeneratorAPI{ctrl: ctrl}
	mock.recorder = &MockManifestGeneratorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManifestGeneratorAPI) EXPECT() *MockManifestGeneratorAPIMockRecorder {
	return m.recorder
}

// AddDnsmasqForSingleNode mocks base method
func (m *MockManifestGeneratorAPI) AddDnsmasqForSingleNode(ctx context.Context, cluster *common.Cluster) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDnsmasqForSingleNode", ctx, cluster)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDnsmasqForSingleNode indicates an expected call of AddDnsmasqForSingleNode
func (mr *MockManifestGeneratorAPIMockRecorder) AddDnsmasqForSingleNode(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDnsmasqForSingleNode", reflect.TypeOf((*MockManifestGeneratorAPI)(nil).AddDnsmasqForSingleNode), ctx, cluster)
}

// AddChronyManifest mocks base method
func (m *MockManifestGeneratorAPI) AddChronyManifest(ctx context.Context, cluster *common.Cluster) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChronyManifest", ctx, cluster)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChronyManifest indicates an expected call of AddChronyManifest
func (mr *MockManifestGeneratorAPIMockRecorder) AddChronyManifest(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChronyManifest", reflect.TypeOf((*MockManifestGeneratorAPI)(nil).AddChronyManifest), ctx, cluster)
}
